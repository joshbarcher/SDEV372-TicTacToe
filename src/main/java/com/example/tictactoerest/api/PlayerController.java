package com.example.tictactoerest.api;

import com.example.tictactoerest.entities.Player;
import com.example.tictactoerest.exceptions.GameStateException;
import com.example.tictactoerest.exceptions.InvalidNameException;
import com.example.tictactoerest.exceptions.MissingPlayerException;
import com.example.tictactoerest.service.PlayerService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * API endpoint for players. Players can be created,
 * updated, deleted, or queried.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
@RestController
@RequestMapping("api/v1/player") //our endpoint
@CrossOrigin(origins = "*")
public class PlayerController
{
    private PlayerService service;

    /**
     * Inject the service for interacting with Player objects.
     *
     * @param service the service layer for Player objects
     */
    public PlayerController(PlayerService service)
    {
        this.service = service;
    }

    //CREATE **********************************************
    //*****************************************************

    /**
     * Saves a new player to the api.
     *
     * @param player the new player
     * @return status code 201 (CREATED) if successfully created
     *         status code 400 (BAD REQUEST) if the name is empty of already in use
     */
    @PostMapping
    public ResponseEntity<Object> savePlayer(@RequestBody Player player)
    {
        try
        {
            return new ResponseEntity<>(service.save(player), HttpStatus.CREATED);
        }
        catch (GameStateException | InvalidNameException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    //READ ************************************************
    //*****************************************************

    /**
     * Returns all players in the api
     * @return a list of players in the api with status code 200 (OK)
     */
    @GetMapping
    public ResponseEntity<List<Player>> players()
    {
        return new ResponseEntity<>(service.players(), HttpStatus.OK);
    }

    /**
     * Returns a player with the input id.
     *
     * @param playerId the id of the player
     * @return the player and status code 200 (OK) if found,
     *         otherwise 404 (NOT FOUND) if no player found
     */
    @GetMapping("{playerId}")
    public ResponseEntity<Object> getById(@PathVariable int playerId)
    {
        try
        {
            return new ResponseEntity<>(service.playerById(playerId), HttpStatus.OK);
        }
        catch (MissingPlayerException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    /**
     * Returns a list of games that a player was involved in.
     *
     * @param playerId the id of the player whose game history we are retrieving
     * @return a list of Game objects and status code 200 (OK) if the player is found,
     *         otherwise status code 404 (NOT FOUND)
     */
    @GetMapping("{playerId}/history")
    public ResponseEntity<Object> gamesPlayed(@PathVariable int playerId)
    {
        try
        {
            Player player = service.playerById(playerId);
            return new ResponseEntity<>(service.getGamesPlayed(player), HttpStatus.OK);
        }
        catch (MissingPlayerException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    //UPDATE **********************************************
    //*****************************************************

    /**
     * Updates a Player object.
     *
     * @param updatedPlayer the updated player object
     * @return an updated Player and status code 200 (OK),
     *         otherwise status code 404 (NOT FOUND) if the player
     *         does not exist already in the api
     */
    @PutMapping
    public ResponseEntity<Object> update(Player updatedPlayer)
    {
        try
        {
            return new ResponseEntity<>(service.updatePlayer(updatedPlayer), HttpStatus.OK);
        }
        catch (MissingPlayerException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    //DELETE **********************************************
    //*****************************************************

    /**
     * Deletes a player by id.
     *
     * @param playerId the player id
     * @return status code 200 (OK) if the player is found and deleted,
     *         otherwise status code 404 (NOT FOUND)
     */
    @DeleteMapping("{playerId}")
    public ResponseEntity<Object> deleteById(@PathVariable int playerId)
    {
        try
        {
            service.deletePlayer(playerId);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (MissingPlayerException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @Override
    public String toString()
    {
        return "Player controller: tracking " + service.players().size() + " players";
    }
}

package com.example.tictactoerest.api;

import com.example.tictactoerest.commands.GameMove;
import com.example.tictactoerest.commands.MatchUp;
import com.example.tictactoerest.entities.Game;
import com.example.tictactoerest.exceptions.GameStateException;
import com.example.tictactoerest.exceptions.IllegalMoveException;
import com.example.tictactoerest.exceptions.MissingGameException;
import com.example.tictactoerest.exceptions.MissingPlayerException;
import com.example.tictactoerest.service.GameService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * API endpoint for games. Games can be created,
 * updated, deleted, or queried.
 *
 * DO NOT EDIT THIS FILE!
 *
 * @author Josh Archer
 * @version 1.0
 */
@RestController
@RequestMapping("api/v1/game") //our endpoint
@CrossOrigin(origins = "*")
public class GameController
{
    private GameService service;

    /**
     * Inject the service for interacting with Game objects.
     *
     * @param service the service layer for Game objects
     */
    public GameController(GameService service)
    {
        this.service = service;
    }

    //CREATE **********************************************
    //*****************************************************

    /**
     * Adds a new Game object to the api.
     *
     * @param matchUp the id of the players that are playing in the game
     * @return status code 201 (CREATED) if successful
     *         status code 404 (NOT FOUND) if a player doesn't exist
     *         status code 400 (BAD REQUEST) if a player is in another matches
     */
    @PostMapping
    public ResponseEntity<Object> newGame(@RequestBody MatchUp matchUp)
    {
        try
        {
            //create the game and return it
            Game game = service.newGame(matchUp.getPlayerXId(), matchUp.getPlayerOId());
            return new ResponseEntity<>(game, HttpStatus.CREATED);
        }
        catch (MissingPlayerException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
        catch (GameStateException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    //READ ************************************************
    //*****************************************************

    /**
     * Returns all Game objects created so far.
     * @return a list of all Game objects with status code 200 (OK).
     */
    @GetMapping
    public ResponseEntity<List<Game>> games()
    {
        return new ResponseEntity<>(service.games(), HttpStatus.OK);
    }

    /**
     * Returns a Game object given the id of the game.
     *
     * @param gameId the game id
     * @return the Game object with status code 200 (OK), or if the Game
     *         does not exist status code 404 (NOT FOUND)
     */
    @GetMapping("{gameId}")
    public ResponseEntity<Object> getById(@PathVariable int gameId)
    {
        try
        {
            return new ResponseEntity<>(service.getGameById(gameId), HttpStatus.OK);
        }
        catch (MissingGameException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    //UPDATE **********************************************
    //*****************************************************

    /**
     * Updates a Game object given a player move.
     *
     * @param gameId the id of the game
     * @param move a player move in the game
     * @return status code 200 (OK) if successful,
     *         status code 404 (NOT FOUND) if a player or game is not found
     *         status code 400 (BAD REQUEST) if the move is illegal
     */
    @PutMapping("{gameId}")
    public ResponseEntity<Object> move(@PathVariable int gameId, @RequestBody GameMove move)
    {
        try
        {
            return new ResponseEntity<>(service.move(gameId, move), HttpStatus.OK);
        }
        catch (MissingGameException | MissingPlayerException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
        catch (IllegalMoveException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    //DELETE **********************************************
    //*****************************************************

    /**
     * Deletes a Game object.
     * @param gameId the id of the game
     * @return status code 200 (OK) or if the game does not exist
     *         status code 404 (NOT FOUND)
     */
    @DeleteMapping("{gameId}")
    public ResponseEntity<Object> deleteById(@PathVariable int gameId)
    {
        try
        {
            service.deleteById(gameId);
            return new ResponseEntity<>(HttpStatus.OK);
        }
        catch (MissingGameException ex)
        {
            return new ResponseEntity<>(ex.getMessage(), HttpStatus.NOT_FOUND);
        }
    }

    @Override
    public String toString()
    {
        return "Game controller: tracking " + service.games().size() + " games";
    }
}
